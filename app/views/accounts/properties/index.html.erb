<% provide(:title, t('properties.title')) %>

<%= render layout: 'layouts/breadcrumb', locals: {path: [{:title => t('properties.index.breadcrumb'), :href => properties_path}], icon: 'house-colored', index: true} do %>
  <div class="action-btns">
    <div class="btn-group btn-group-toggle">
    <%= link_to new_property_path, class: 'btn btn-primary btn-sm' do %>
      <i class="fas fa-plus-circle fa-fw"></i><span class="d-none d-md-inline">&nbsp;<%= t('properties.new.add_button') %></span>
    <% end %>
    </div>
  </div>
<% end %>

<div class="page-container">
  <div class="container">
    <div class="app-container">
      <% if current_account.website_enabled? && current_account.properties.pinned.blank? %>
        <div class="alert alert-danger alert-dismissible has-icon" role="alert">
          <button type="button" class="close" data-dismiss="alert">Ã—</button>
          <div class="alert-icon">
            <i class="fas fa-info"></i>
          </div><%= t('properties.index.pin_shoutout_html', site: websites_root_url(locale: I18n.locale)) %>
        </div>
      <% end %>

      <%= react_component('PropertiesListWithDatatable', props: {
          initial_payload: {
              buysell_filter: {
                  options: Property.businesstypes.keys.tap(&:pop).collect { |businesstype| {label: Property.human_enum_name(:businesstype, businesstype), value: businesstype} },
                  storedOption: @initial_purpose
              },
              category_filter: {
                  options: category_options,
                  storedMasterOption: @initial_category.blank? ? nil : {label: Property.human_enum_name(:category, @initial_category), value: @initial_category},
                  storedSlaveOption: @initial_subcategory.blank? ? nil : {label: Property.human_enum_name(:subcategory, @initial_subcategory), value: @initial_subcategory}
              },
              price_filter: {
                  options: price_options,
                  storedMasterOption: @initial_pricemin.blank? ? nil : {label: number_to_currency(@initial_pricemin), value: @initial_pricemin},
                  storedSlaveOption: @initial_pricemax.blank? ? nil : {label: number_to_currency(@initial_pricemax), value: @initial_pricemax},
              },
              size_filter: {
                  propertyType: @initial_property_type,
                  options: size_options,
                  storedMasterOption: @initial_sizemin.blank? ? nil : {label: t('activerecord.attributes.property.size_meter_html', size: @initial_sizemin.to_s), value: @initial_sizemin},
                  storedSlaveOption: @initial_sizemax.blank? ? nil : {label: t('activerecord.attributes.property.size_meter_html', size: @initial_sizemax.to_s), value: @initial_sizemax},
              },
              rooms_filter: {
                  propertyType: @initial_property_type,
                  options: rooms_options,
                  storedMasterOption: @initial_roomsmin.blank? ? nil : {label: @initial_roomsmin, value: @initial_roomsmin},
                  storedSlaveOption: @initial_roomsmax.blank? ? nil : {label: @initial_roomsmax, value: @initial_roomsmax},
              },
              floors_filter: {
                  propertyType: @initial_property_type,
                  options: floors_options,
                  storedMasterOption: @initial_floorsmin.blank? ? nil : retrieve_stored_floor_option(@initial_floorsmin),
                  storedSlaveOption: @initial_floorsmax.blank? ? nil : retrieve_stored_floor_option(@initial_floorsmax)
              },
              construction_filter: {
                  propertyType: @initial_property_type,
                  options: construction_options,
                  storedMasterOption: @initial_constructionmin.blank? ? nil : {label: @initial_constructionmin, value: @initial_constructionmin},
                  storedSlaveOption: @initial_constructionmax.blank? ? nil : {label: @initial_constructionmax, value: @initial_constructionmax}
              },
              locations_filter: {
                  storedOptions: @initial_locations
              },
              active_only_filter: {
                  isChecked: @initial_active_only_filter
              },
              cfields: {
                  fields: get_cfields('properties'),
                  storedSelections: @initial_cfields,
                  options: cfields_options
              },
              dataset_wrapper: @propertieslist,
              results_per_page: @results_per_page,
              total_entries: @total_entries,
              current_page: @current_page,
              initial_search: @initial_search,
              initial_sorting: @initial_sorting,
              initial_ordering: @initial_ordering,
              force_filters_open: @force_filters_open,
              preselected_client: @preselected_client,
              # `properties_locations_url` for `greek`, `properties_ilocations_url` otherwise
              locations_endpoint: current_account.greek? ? properties_locations_url : properties_ilocations_url,
              clients_endpoint: clients_url,
              assignmentships_endpoint: matches_url,
              properties_path: properties_path,
              new_property_endpoint: new_property_path,
              create_new_entity_form: new_client_path,
              hasFeedback: false,
              object_type: 'properties',
              showControls: true,
              # stick `greek` if you'd like to test
              accountFlavor: current_account.flavor
          },
          i18n: {
              ok: t('ok'),
              toast: t('properties.toast'),
              cfields: {
                  select_prompt: t('cfields.choose'),
                  text_prompt: t('cfields.text_placeholder')
              },
              select: {
                  placeholder: t('js.components.select.placeholder_area_title'),
                  placeholder_clients: t('js.components.select.placeholder_clients'),
                  placeholder_plain: t('js.components.select.placeholder'),
                  placeholder_prices_min: t('js.components.select.placeholder_prices_min'),
                  placeholder_prices_max: t('js.components.select.placeholder_prices_max'),
                  placeholder_sizes_min: t('js.components.select.placeholder_sizes_min'),
                  placeholder_sizes_max: t('js.components.select.placeholder_sizes_max'),
                  placeholder_rooms_min: t('js.components.select.placeholder_rooms_min'),
                  placeholder_rooms_max: t('js.components.select.placeholder_rooms_max'),
                  placeholder_floors_min: t('js.components.select.placeholder_floors_min'),
                  placeholder_floors_max: t('js.components.select.placeholder_floors_max'),
                  placeholder_construction_min: t('js.components.select.placeholder_construction_min'),
                  placeholder_construction_max: t('js.components.select.placeholder_construction_max'),
                  noresults: t('js.components.select.noresults'),
                  add: t('js.components.select.add'),
                  loading: t('js.components.select.loading_html'),
                  feedback: t('js.components.select.assignments_feedback'),
                  clientship_feedback: t('js.components.select.clientship_feedback'),
                  save_btn: t('js.components.select.save_btn'),
                  saved_btn: t('js.components.select.saved_btn'),
                  search_saved_success_client_html: t('js.components.select.search_saved_success_client_html'),
                  category: t('js.components.select.category'),
                  nested_client_add: {
                    modal_title: t('clients.new.profile'),
                    name: t('activerecord.attributes.client.first_name'),
                    surname: t('activerecord.attributes.client.last_name'),
                    email: t('activerecord.attributes.client.email'),
                    telephone: t('activerecord.attributes.client.telephones'),
                    profession: t('activerecord.attributes.client.job'),
                    notes_title: t('activerecord.attributes.client.notes_title'),
                    notes_footer: t('activerecord.attributes.client.notes'),
                  }
              },
              no_results: t('js.datatables.properties.no_results'),
              datatable: t('js.datatables.properties'),
              search: t('js.properties_search.placeholder'),
              clear: t('js.datatables.clear'),
              entry_count: t('js.datatables.entry_count'),
              view: t('js.properties_view_btn'),
              edit: t('js.properties_edit_btn'),
              sorting: {
                  title: t('js.datatables.sorting.title')
              },
              clone: {
                label: t('properties.clone.label'),
                prompt: t('properties.clone.prompt')
              },
              website_enabled: t('js.forms.properties.wizard.step1.website_enabled'),
              website_disabled: t('js.forms.properties.wizard.step1.website_disabled'),
              pinned: t('js.forms.properties.wizard.step1.pinned'),
              sample: t('sample'),
              price: t('js.datatables.filters.price.title'),
              size: t('js.datatables.filters.size.title'),
              rooms: t('js.datatables.filters.bedrooms.title'),
              floors: t('js.datatables.filters.floors.title'),
              construction: t('js.datatables.filters.construction.title'),
              search_saved_success: t('js.components.select.search_saved_success_client_html'),
              client_profile: t('js.components.select.client_profile'),
              search_save_title: t('js.components.modal.search_save.title'),
              search_save_close: t('js.components.modal.search_save.close_btn'),
              search_save_feedback: t('js.components.modal.search_save.feeback'),
              search_save_buttonCloseLabel: t('properties.close_button'),
              search_save_subtitle: t('js.components.modal.search_save.criteria'),
              search_save_filters: {
                  pricemin: t('js.components.modal.search_save.filters.pricemin'),
                  pricemax: t('js.components.modal.search_save.filters.pricemax'),
                  sizemin: t('js.components.modal.search_save.filters.sizemin'),
                  sizemax: t('js.components.modal.search_save.filters.sizemax'),
                  roomsmin: t('js.components.modal.search_save.filters.roomsmin'),
                  roomsmax: t('js.components.modal.search_save.filters.roomsmax'),
                  floorsmin: t('js.components.modal.search_save.filters.floorsmin'),
                  floorsmax: t('js.components.modal.search_save.filters.floorsmax'),
                  constructionmin: t('js.components.modal.search_save.filters.constructionmin'),
                  constructionmax: t('js.components.modal.search_save.filters.constructionmax'),
                  purpose: t('js.components.modal.search_save.filters.purpose'),
                  sell: t('js.components.modal.search_save.filters.sell'),
                  rent: t('js.components.modal.search_save.filters.rent'),
                  category: t('js.components.modal.search_save.filters.category'),
                  subcategory: t('js.components.modal.search_save.filters.subcategory'),
                  locations: t('js.components.modal.search_save.filters.locations')
              },
              filters: {
                  title: t('js.datatables.filters.title'),
                  type: {
                      title: t('js.datatables.filters.type.title'),
                      sell: t('js.datatables.filters.type.sell'),
                      rent: t('js.datatables.filters.type.rent'),
                      both: t('js.datatables.filters.type.both'),
                  },
                  sortByDate: {
                      title: t('js.datatables.filters.date.title'),
                      option1: t('js.datatables.filters.date.descending'),
                      option2: t('js.datatables.filters.date.ascending'),
                  },
                  sortByPrice: {
                      title: t('js.datatables.filters.price.title'),
                      option1: t('js.datatables.filters.price.ascending'),
                      option2: t('js.datatables.filters.price.descending'),
                  },
                  filterByType: {
                      title: t('js.datatables.filters.type.title'),
                      option1: t('js.datatables.filters.type.sell'),
                      option2: t('js.datatables.filters.type.rent'),
                  }
              },
              status_title: t('js.datatables.filters.property_status.title'),
              status_inactive: t('activerecord.attributes.property.status_inactive'),
              status_active: t('activerecord.attributes.property.status_active'),
              status_active_only: t('js.datatables.filters.property_status.active_only'),
              favourites_tooltip: t('js.properties_favourites_tooltip'),
              popover_title: t('properties.popover_client_title'),
              popover_body: t('properties.popover_client_' + current_user.role(current_account)),
              new_property_cta: t('properties.new_property_cta')
          }
      }, prerender: false) %>
    </div>
  </div>
</div>



