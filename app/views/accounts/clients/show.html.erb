<% provide(:title, t('clients.show.heading')) %>
<%#= render partial: 'layouts/breadcrumb', locals: {path: [{:title => t('users.show.breadcrumb'), :href => users_path}, {title: @user.full_name, :href => ''}], icon: 'house-colored'} %>

<%= render partial: 'layouts/breadcrumb', locals: {path: [{:title => t('users.show.breadcrumb'), :href => clients_path}, {title: @client.full_name, :href => ''}], icon: 'house-colored'} %>

<div class="page-container">
  <div class="container">
    <!-- .card -->
    <div class="card card-fluid">

      <%= render partial: 'shared/card_header/header', locals: {title: @client.full_name, btn_text: t('properties.show.back'), btn_link: :back} %>
      <!-- .card-body -->
      <div class="card-body client">
        <!-- .media -->
        <div class="card mb-2">
          <!-- .card-body -->
          <div class="card-body">
            <!-- grid row -->
            <div class="row align-items-center">
              <!-- grid column -->
              <div class="col-auto">
                <!--                <a href="user-profile.html" class="user-avatar user-avatar-lg"><img src="assets/images/avatars/uifaces5.jpg" alt="">-->
                <!--                  <span class="avatar-badge online" title="online"></span></a>-->
                <a href="user-profile.html" class="user-avatar user-avatar-lg"><%= render_avatar(@client, "alphatar-edit clientavatar", "avatar_preview") %>
                  <span class="avatar-badge online" title="online"></span></a>
              </div><!-- /grid column -->
              <!-- grid column -->
              <div class="col">
                <h3 class="card-title">
                  <a href=""><%= @client.full_name %></a>
                  <small class="text-muted"><%= @client.email ? @client.email : '' %></small>
                </h3>
                <h6 class="card-subtitle text-muted"><%= @client.job ? @client.job : '' %></h6>
              </div><!-- /grid column -->

              <% if current_user.is_admin?(current_account) %>
                <div class="col">

                  <%= react_component('AsyncSelectContainer', props: {
                      id: 'MultiAsyncSelectContainer',
                      collection_endpoint: {url: users_path, action: 'get'},
                      action_endpoint: {url: clientships_path(@client), action: 'post'},
                      storedOptions: @client.users.blank? ? nil : @client.users.map { |user| {label: "#{user.first_name} #{user.last_name}", value: user.id} },
                      hasFeedback: false,
                      i18n: {
                          select: {
                              placeholder: t('js.components.select.placeholder_user_assignment'),
                              noresults: t('js.components.select.noresults'),
                              loading: t('js.components.select.loading_html'),
                              feedback: t('js.components.select.assignments_feedback') # not used here
                          }
                      }
                  }, prerender: false) %>
                </div><!-- /grid column -->
              <% end %>

              <div class="col">
                <span style="letter-spacing: 0.1em;font-size: 90%" class="badge badge-success"><%= @client.telephones %></span>
                <!--                <h6 class="card-subtitle text-muted request-description"></h6>-->
              </div><!-- /grid column -->

              <!-- /grid column -->
              <div class="col-auto">
                <%= react_component('ModalContainer', props: {
                    id: 'modal-window-saved-prefs',
                    fireButtonLabel: '<i class="fas fa-info fa-fw"></i>&nbsp;' + t('clients.show.search_prefs'),
                    fireButtonBtnType: 'danger',
                    avatar: nil,
                    child: 'RetrieveClientSearch',
                    modalTitle: t('js.components.modal.search_save.title_alt'),
                    modalHeader: t('js.components.modal.search_save.subtitle'),
                    buttonOKLabel: t('properties.ok_button'),
                    buttonCancelLabel: t('properties.cancel_button'),
                    buttonCloseLabel: t('properties.close_button'),
                    soloMode: true,
                    searchprefs: @client.searchprefs,
                    ajaxEnabled: true,
                    isClearable: true,
                    buttonDisabled: @client.searchprefs.blank?,
                    backspaceRemovesValue: true,
                    isSearchable: true,
                    i18nPriceOptions: price_options,
                    i18nSizeOptions: size_options,
                    i18nFloorOptions: floors_options,
                    i18nCategoryOptions: category_options,
                    feedback: t('js.forms.properties.wizard.step1.type_of_offer_feedback'),
                    i18n: {
                        search_save_filters: t('js.components.modal.search_save.filters'),
                        search_save_subtitle: t('js.components.modal.search_save.header', client_name: @client.full_name),
                        no_lists_available: t('js.components.modal.favlists.no_results'),
                        search_save_criteria: t('js.components.modal.search_save.criteria'),
                        property_cover_alt: t('js.components.modal.favlists.property_cover_alt'),
                        add_list_action: t('js.components.modal.favlists.add_list_action'),
                        loading_alt: t('js.components.modal.favlists.loading_alt'),
                        listname_placeholder: t('js.components.modal.favlists.listname_placeholder')
                    }
                }, prerender: false) %>

              </div><!-- /grid column -->
            </div><!-- /grid row -->
          </div><!-- /.card-body -->
        </div><!-- /.card -->


      </div> <!-- /.card-body -->
    </div> <!-- /.card -->
    <hr/>

      <%= react_component('ClientPrefsListWithDatatable', props: {
          initial_payload: {
              dataset_wrapper: @propertieslist,
              results_per_page: @results_per_page,
              total_entries: @total_entries,
              current_page: @current_page,
              initial_search: @initial_search,
              initial_sorting: @initial_sorting,
              initial_ordering: @initial_ordering,
              locations_endpoint: properties_locations_url,
              clients_endpoint: clients_url,
              assignmentships_endpoint: matches_url,
              properties_path: properties_path,
              hasFeedback: false,
              object_type: 'properties'
          }
      }, prerender: false) %>

  </div>
</div>