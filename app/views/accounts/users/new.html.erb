<% provide(:title, t('users.new.heading')) %>

<%= render partial: 'layouts/breadcrumb', locals: {path: [{:title => t('users.index.breadcrumb'), :href => users_path}, {:title => t('users.new.heading_alt'), :href => ''}], icon: 'house-colored'} %>


<div class="page-container">
  <div class="container">
    <div class="app-container">
    <!-- .card -->
    <div class="card card-fluid">
      <h2 class="card-header"> <%= t('users.new.profile') %> </h2>
      <!-- .card-body -->
      <div class="card-body">
          <div class="user-new-icon-container d-none d-lg-block">
            <i class="fas fa-user-tie fa-8x"></i>
          </div>

        <!-- form -->
        <%= form_for(@user, html: {class: "js-validatable"}) do |f| %>
          <div class="col-lg-6 offset-lg-3 col-md-12">

            <%= render 'accounts/users/form', f: f %>

            <% if current_account.model_types.find_by(name: 'users').fields.present? %>
              <hr />
            <% end %>
            <!-- Extended fields -->
            <%= f.fields_for :preferences, OpenStruct.new(@user.preferences) do |builder| %>
              <!-- That's a workaround to render an account's custom fields without actually creating an entry in model_types_users
                   since we don't yet know if the user will be created or not. -->
              <% current_account.model_types.find_by(name: 'users').fields.each do |field| %>
                <%= render "accounts/cfields/#{field.field_type}", field: field, f: builder, vgroup: nil, classes: 'dummy' %>
              <% end %>
            <% end %>

            <hr/>

            <!-- .form-actions -->
            <div class="form-actions">
              <button type="submit" class="btn btn-primary ml-auto"><%= t('users.new.new_button') %></button>
            </div> <!-- /.form-actions -->
          </div>

        <% end %> <!-- /form -->

      </div><!-- /.card-body -->
    </div><!-- /.card -->
  </div>
  </div>
</div>