<% provide(:title, 'Users Index') %>

<div class="center jumbotron pr-container">


  <div class="row">
    <div class="col-md-12">

      <!--<div class="back-button-style pull-left">-->
        <!--<i class="pr-icon cs back-button"></i>-->
      <!--</div>-->

      <div class="invitation-container pull-right" >
        <%= link_to new_invitation_path, :class => 'btn btn-primary btn-sm invite-user', :id => 'invite-user-button' do %>
          <span class="subtitle"><%=fa_icon('envelope fw')%> Invite User</span>
        <% end %>
      </div>

      <div class="invitation-container pull-right" >
        <%= link_to new_invitation_path, :class => 'btn btn-primary btn-sm invite-user', :id => 'invite-user-button' do %>
            <span class="subtitle"><%=fa_icon('plus fw')%> Add User</span>
        <% end %>
      </div>

      <%# Here we call render not on a string with the name of a partial, but rather on a user variable of class User;
          in this context, Rails automatically looks for a partial called _user.html.erb, which we must create.
          This is a definite improvement, but we can do even better: we can call render directly on the @users variable
          Here Rails infers that @users is a list of User objects; moreover, when called with a collection of users,
          Rails automatically iterates through them and renders each one with the _user.html.erb partial
          (inferring the name of the partial from the name of the class). %>
      <%#= render @users %>

      <!--<div class="clearfix"></div>-->
      <%#= will_paginate %>
    </div>
  </div>
  <div class="row">
    <div class="col-md-12">
      <!--<div class="col-md-6 col-md-offset-3">-->
        <%#= react_component('Search', prerender: false) %>
      <!--</div>-->

      <%# Here we call render not on a string with the name of a partial, but rather on a user variable of class User;
          in this context, Rails automatically looks for a partial called _user.html.erb, which we must create.
          This is a definite improvement, but we can do even better: we can call render directly on the @users variable
          Here Rails infers that @users is a list of User objects; moreover, when called with a collection of users,
          Rails automatically iterates through them and renders each one with the _user.html.erb partial
          (inferring the name of the partial from the name of the class). %>
      <%#= render @users %>
      <!--<div class="col-md-12">-->
        <%#= react_component('UsersList', props: @userslist, prerender: false) %>
        <%= react_component('UsersListWithDatatable', props: {
            initial_payload: {
                dataset_wrapper: @userslist,
                results_per_page: @results_per_page,
                total_entries: @total_entries,
                current_page: @current_page,
                initial_search: @initial_search,
                initial_sorting: @initial_sorting,
                initial_ordering: @initial_ordering,
                object_type: 'users',
                select_mode: false
            }
          }, prerender: false) %>
      <!--</div>-->

      <div class="clearfix"></div>
      <%#= will_paginate %>
    </div>
  </div>
</div>